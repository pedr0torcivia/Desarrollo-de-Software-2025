
üì¶ RESUMEN GENERAL ‚Äì FRONTEND (React + Vite)

üß† ¬øQu√© hace el frontend?
Es una Single Page Application (SPA) desarrollada con React que:
- Muestra un listado de libros obtenidos desde el backend.
- Permite buscar libros por t√≠tulo.
- Permite agregar, editar y eliminar libros.
- Usa Bootstrap 5 para estilos, Axios para llamadas HTTP y Hooks de React para el control de estado.

üß© Componentes principales:

1. App.jsx
   - Punto de entrada de la app.
   - Llama a <LibrosPage />.

2. LibrosPage.jsx
   - Maneja toda la l√≥gica de estado.
   - Administra b√∫squeda, listado, formulario, edici√≥n y eliminaci√≥n.
   - Usa useState y useEffect para reaccionar a cambios.

3. LibroForm.jsx
   - Formulario controlado para crear y editar libros.
   - Usa useEffect para precargar campos si hay edici√≥n.
   - Al hacer submit, hace POST o PUT al backend.

4. LibrosTable.jsx
   - Muestra la lista de libros en una tabla.
   - Llama a las funciones de editar y eliminar del componente padre.

5. librosService.js
   - Encapsula las llamadas a la API.
   - Funci√≥n obtenerLibros() consulta el backend con Axios.

6. main.jsx
   - Monta la app en el DOM.
   - Usa ReactDOM.createRoot y <React.StrictMode>.

‚úÖ Caracter√≠sticas t√©cnicas:
- Componentes funcionales.
- Hooks: useState, useEffect.
- Axios para comunicaci√≥n HTTP.
- Bootstrap 5 (CDN) para estilos.
- Separaci√≥n clara entre componentes y servicios.


‚úÖ src/services/librosService.js

import axios from 'axios';

const API_URL = 'http://localhost:3000/api/libros';

export async function obtenerLibros(search = '') {
  try {
    const url = search ? `${API_URL}?search=${encodeURIComponent(search)}` : API_URL;
    const response = await axios.get(url);
    return response.data;
  } catch (error) {
    console.error('Error al obtener libros:', error);
    throw error;
  }
}

üß† ¬øQu√© hace?
- Es un archivo de servicio que encapsula las llamadas HTTP al backend.
- Usa Axios para realizar peticiones a la API `/api/libros`.
- La funci√≥n `obtenerLibros(search)` hace una petici√≥n GET:
  - Si se pasa un t√©rmino de b√∫squeda, agrega `?search=...` a la URL.
  - Si no, pide todos los libros.

üìå Ventajas de separar Axios en un archivo:
- Centraliza la l√≥gica de red.
- Permite reutilizar el c√≥digo desde cualquier componente.
- Si cambia la URL base o se agrega autenticaci√≥n, solo se cambia ac√°.

üõ†Ô∏è Qu√© podr√≠as modificar si te lo piden:

1. Agregar m√°s funciones:
   - `getById(id)`: para traer un libro individual
   - `create(data)`: para POST
   - `update(id, data)`: para PUT
   - `remove(id)`: para DELETE

2. Manejo de errores global:
   - Pod√©s lanzar mensajes m√°s descriptivos, o usar `toast` en el frontend.
   - Agregar manejo con `try/catch` donde se llama este servicio.

3. Hacer que la URL base sea configurable:
   - Usar una variable de entorno con Vite: `import.meta.env.VITE_API_URL`

4. Soporte para paginaci√≥n:
   - Aceptar `page`, `limit` como par√°metros opcionales y agregarlos como query string.

5. Usar interceptores de Axios:
   - Para agregar tokens de autenticaci√≥n o manejar errores centralizados.


‚úÖ src/main.jsx

import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

üß† ¬øQu√© hace?

- Es el archivo que arranca la aplicaci√≥n React.
- Busca en el DOM el div con id "root" que est√° en index.html.
- Usa `ReactDOM.createRoot(...)` para montar el componente `<App />` dentro del DOM.
- Todo el frontend comienza desde este punto.

üìå ¬øQu√© es React.StrictMode?
- Es una herramienta de desarrollo de React que detecta problemas potenciales.
- Solo afecta en modo desarrollo, no se usa en producci√≥n.
- Vuelve a ejecutar render y efectos para ayudarte a detectar errores como:
  - mutaciones no intencionales
  - uso incorrecto de ciclos de vida
  - efectos secundarios duplicados

üõ†Ô∏è Qu√© podr√≠as modificar si te lo piden:

1. Quitar StrictMode (no recomendado salvo para testing):
   <React.StrictMode> ‚Üí <></>

2. Agregar un proveedor global (Context, Redux, etc.):
   import { LibrosProvider } from './context/LibrosContext';
   y envolver el `<App />` as√≠:
   <LibrosProvider><App /></LibrosProvider>

3. Agregar soporte para i18n o configuraci√≥n global:
   Envolver App con `I18nextProvider`, `ThemeProvider`, etc.

4. Importar estilos globales:
   Pod√©s agregar: import './index.css' o './App.css'

5. Preparar montaje para SPA con rutas:
   En vez de renderizar App directamente, podr√≠as montar un `<Router />` dentro.

üí° Este archivo no se toca mucho, pero es fundamental porque arranca toda la app.


‚úÖ src/components/LibrosPage.jsx

üß† ¬øQu√© hace?
- Es el componente principal de la l√≥gica de libros.
- Administra todos los estados (libros, formulario, b√∫squeda).
- Se comunica con el backend mediante axios y el servicio obtenerLibros().
- Controla cu√°ndo mostrar la tabla o el formulario.

üìå Funcionalidad clave:
- useEffect(): al montar el componente ‚Üí carga libros.
- useState(): gestiona todos los estados (libros, mensaje, form, edici√≥n).
- manejarBusqueda(): dispara la b√∫squeda.
- onEdit(): llena el formulario para modificar.
- onDelete(): confirma y elimina.
- onSave(): guarda cambios y actualiza.
- onCancel(): oculta el formulario.

üõ†Ô∏è Qu√© podr√≠as modificar si te lo piden:
- Separar b√∫squeda en un componente Filtro.jsx:
  Mover el formulario de b√∫squeda (input + bot√≥n) a un componente reutilizable, y pasarle props como busqueda, setBusqueda, onSubmit. Mejora el orden del c√≥digo.

- Agregar paginaci√≥n a la carga de libros:
  Controlar un estado page, y agregar botones de "Anterior / Siguiente". En el backend, implementar `limit` y `offset`.

- Validar formato del a√±o antes de guardar:
  Verificar que `anio` sea un n√∫mero entre 1900 y 2100, con `if (anio < 1900 || anio > 2100)` antes del POST o PUT.

- Usar context o props para manejar libros desde App.jsx:
  En vez de manejar los estados en LibrosPage, se pueden mover al nivel superior (`App.jsx`) y pasar como props para mayor control global.

- Agregar loading/spinner mientras se cargan libros:
  Agregar un estado `cargando`, y usar `setCargando(true/false)` en `cargarLibros()`, mostrando un spinner mientras se espera.

‚úÖ src/components/LibroForm.jsx

üß† ¬øQu√© hace?
- Es el formulario que se usa tanto para alta como para modificaci√≥n.
- Usa useState para controlar los inputs (t√≠tulo, autor, a√±o).
- Si recibe un libro para editar (bookToEdit), llena los campos.
- Cuando se env√≠a:
  - Si hay un libro: PUT al backend.
  - Si no hay: POST al backend.

üìå Detalles clave:
- onSave: callback al padre para actualizar lista y cerrar form.
- onCancel: cancela sin guardar.
- value + onChange: hace que cada campo sea controlado por React.

üõ†Ô∏è Qu√© podr√≠as modificar si te lo piden:
- Agregar validaciones (campos obligatorios, a√±o v√°lido, etc.):
  Pod√©s agregar condicionales que verifiquen si todos los campos est√°n completos antes de permitir el submit.

- Agregar feedback visual (is-invalid de Bootstrap):
  Mostrar estilos visuales de error con Bootstrap cuando un campo est√° mal, y un div con texto explicativo.

- Reemplazar por react-hook-form si piden algo m√°s profesional:
  Esta librer√≠a reduce c√≥digo, centraliza validaciones y da m√°s control en formularios grandes.

- Separar l√≥gica en un hook personalizado para limpieza:
  Crear un hook `useFormularioLibro()` que encapsule los estados, validaciones y efectos del formulario para reutilizaci√≥n y limpieza.

‚úÖ src/components/LibrosTable.jsx

üß† ¬øQu√© hace?
- Muestra la tabla con los libros usando clases Bootstrap para dise√±o y responsividad.
- Usa props para recibir la lista de libros y los callbacks para editar y eliminar.
- Usa map() para recorrer la lista y generar una fila por libro autom√°ticamente.
- Cada fila tiene botones "Editar" y "Eliminar", que llaman a las funciones `onEdit(libro)` y `onDelete(id)` provistas por el padre.

üìå Posibles modificaciones:
- Agregar ordenamiento por columnas (alfab√©tico, a√±o):
  Pod√©s hacer que al hacer clic en el encabezado, se ordene la tabla localmente con `sort()`.

- Agregar √≠conos o acciones extras (ver detalles):
  Se pueden incluir botones con √≠conos como lupa, PDF, exportar, etc.

- Separar la fila en un subcomponente Row.jsx:
  Pod√©s mover `<tr>...</tr>` a su propio archivo para mejor lectura y reusabilidad.

- Cambiar estilos:
  Agregar color alternado, encabezado sticky, tabla responsive, etc.


‚úÖ src/App.jsx

import React from 'react';
import LibrosPage from './components/LibrosPage';

function App() {
  return (
    <div>
      <LibrosPage />
    </div>
  );
}

export default App;

üß† ¬øQu√© hace?
- Es el componente principal que se monta en el DOM (en #root de index.html).
- Llama a LibrosPage, que contiene toda la l√≥gica de b√∫squeda, listado y formulario.
- Todo lo que ves en la pantalla nace de este componente ra√≠z.

üõ†Ô∏è ¬øQu√© podr√≠as cambiar o agregar?

1. ‚úÖ Agregar navegaci√≥n SPA (con router)
   - Instalar: npm install react-router-dom
   - Usar rutas:
     import { BrowserRouter, Routes, Route } from 'react-router-dom';

     function App() {
       return (
         <BrowserRouter>
           <Routes>
             <Route path="/" element={<LibrosPage />} />
             <Route path="/otra" element={<OtroComponente />} />
           </Routes>
         </BrowserRouter>
       );
     }

2. ‚úÖ Mostrar un Menu.jsx arriba
   - Crear componente Menu.jsx:
     export default function Menu() {
       return <nav className="navbar bg-dark text-white p-2">Men√∫ Principal</nav>;
     }

   - En App.jsx:
     import Menu from './components/Menu';

     function App() {
       return (
         <>
           <Menu />
           <LibrosPage />
         </>
       );
     }

3. ‚úÖ Agregar estado global (lifting state up)
   - Mover estados de b√∫squeda y libros a App.jsx:
     const [libros, setLibros] = useState([]);
     const [busqueda, setBusqueda] = useState('');

   - Pasarlos como props:
     <LibrosPage libros={libros} setLibros={setLibros} busqueda={busqueda} setBusqueda={setBusqueda} />

4. ‚úÖ Agregar estilos globales
   - Envolver con contenedor Bootstrap:
     return (
       <div className="container mt-4">
         <LibrosPage />
       </div>
     );

5. ‚úÖ Dividir layout y vistas
   - Crear Layout.jsx que incluya men√∫ y children:
     export default function Layout({ children }) {
       return (
         <>
           <Menu />
           <div className="container mt-4">{children}</div>
         </>
       );
     }

   - En App.jsx:
     import Layout from './components/Layout';

     function App() {
       return (
         <Layout>
           <LibrosPage />
         </Layout>
       );
     }

