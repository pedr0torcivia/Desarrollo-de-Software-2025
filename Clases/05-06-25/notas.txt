TESTING:Proceso de evaluar y verificar que el software funcione seg√∫n lo esperado. Mejora la calidad, evita errores y reduce costos.
 
1. Pruebas Funcionales: Eval√∫an si el software cumple los requisitos funcionales definidos:
    Unitarias: prueban funciones o m√≥dulos individuales (Caja Blanca).
    Integraci√≥n: verifican la interacci√≥n entre componentes.
    Interfaz: prueban la transferencia de datos entre componentes conectados (ej. de CSV a XML).
    Sistema: testean todo el sistema como una unidad.
    Regresi√≥n: aseguran que lo que funcionaba antes sigue funcionando tras cambios.
    Humo: validan funcionalidad b√°sica en builds nuevas (potencialmente inestables).
    Saneamiento: pruebas r√°pidas tras peque√±os cambios, en builds ya estables.

Aceptaci√≥n: ejecutadas por el cliente o QA, validan que el sistema cumple con los requisitos de negocio.
2. Pruebas No Funcionales: Eval√∫an atributos de calidad que no son funciones expl√≠citas.
    Rendimiento: mide tiempo de respuesta, uso de recursos, estabilidad.
    Carga: simula el uso bajo condiciones normales (ej. 1000 usuarios simult√°neos).
    Estr√©s: eval√∫a el sistema bajo cargas extremas hasta romperlo.
    Capacidad: mide si el sistema maneja grandes vol√∫menes de datos u operaciones.
    Seguridad: prueba acceso no autorizado, vulnerabilidades, integridad de datos.
    Escalabilidad: verifica si puede crecer con m√°s usuarios, datos o servidores (vertical/horizontalmente).
    Usabilidad: eval√∫a la experiencia del usuario, navegaci√≥n, comprensi√≥n.
    Mantenibilidad: mide qu√© tan f√°cil es modificar o actualizar el sistema.
    Compatibilidad: verifica el comportamiento en distintos SO, dispositivos, navegadores, redes.


HTTPS: conjunto de medidas que aseguran la confidencialidad, integridad y autenticaci√≥n de la comunicaci√≥n entre el cliente (navegador) 
y el servidor web. 
Confidencialidad 
Los datos viajan cifrados, evitando que terceros (como atacantes en redes p√∫blicas) puedan leerlos.

Integridad 
Garantiza que los datos no fueron alterados durante la transmisi√≥n. Si alguien intenta modificar los datos, el navegador lo detecta.

Autenticaci√≥n 
Mediante certificados digitales, el cliente verifica que se est√° conectando al servidor leg√≠timo y no a un impostor (ataque Man-in-the-Middle).

TIPOS DE TESTING DE CASOS: 
Manual: humanos ejecutan casos de prueba.
Automatizado: herramientas ejecutan tests autom√°ticamente (m√°s eficiente para regresiones).


TDD (Test Driven Development): TDD se complementa con Integraci√≥n Continua para validar c√≥digo frecuentemente con pruebas autom√°ticas.
Ciclo:
1.Elegir un requisito.
2.Escribir una prueba.
3.Verificar que falle.
4.Escribir implementaci√≥n.
5.Ejecutar pruebas.
6.Refactorizar.
7.Actualizar requisitos.

JEST: Framework de testing JavaScript

Instalaci√≥n: npm install --save-dev jest
Scripts t√≠picos en package.json
Sintaxis: test(), expect().toBe(), expect().toEqual().

Por ejemplo:
    export function sumar(a, b) { return a + b; }

    // primer.test.js
    import sumar from "./index.js";
    test("suma dos n√∫meros", () => {
    expect(sumar(1, 2)).toBe(3);
    });

Resultado de un npm run test PASS

 PASS  ./primer.test.js
  ‚àö sumar() debe retornar la suma de dos n√∫meros (3 ms)                                                                                                                                                              
  ‚àö cuentaLetras() debe contar correctamente los caracteres de una palabra                                                                                                                                           
                                                                                                                                                                                                                     
Test Suites: 1 passed, 1 total                                                                                                                                                                                       
Tests:       2 passed, 2 total                                                                                                                                                                                       
Snapshots:   0 total
Time:        0.611 s


Testing de APIs con SUPERTEST
Librer√≠a para testear endpoints HTTP:
Instalaci√≥n: npm install --save-dev supertest
Se usa con Jest.
Permite testear endpoints locales o externos (e.g. API de perros).

Verifica:
C√≥digo de estado (.expect(200))
Tipo de contenido (.expect('Content-Type', /json/))
Cuerpo de respuesta (expect(response.body).toEqual(...))

toBe vs toEqual
toBe: compara referencias (√∫til para primitivos).
toEqual: compara objetos profundamente.


SEGURIDAD WEB: busca proteger sitios web de accesos no autorizados, modificaciones maliciosas, robos de informaci√≥n o interrupciones (DoS).
Requiere proteger:
El c√≥digo del servidor y del cliente
La configuraci√≥n del servidor
El manejo de contrase√±as
El uso de HTTPS


OWASP: organizaci√≥n sin fines de lucro, reconocida a nivel mundial, dedicada a mejorar la seguridad del software, especialmente de aplicaciones web.
Sitio oficial: https://owasp.org

Top 10 ‚Äì Principales amenazas
Broken Access Control
    Permite que un usuario acceda a recursos que no deber√≠a.
    Mitigaci√≥n: aplicar controles de acceso estrictos y consistentes.
Cryptographic Failures
    Uso incorrecto o inseguro de algoritmos de cifrado.
    Mitigaci√≥n: usar HTTPS, cifrado fuerte y mantener claves seguras.
Inyecci√≥n SQL
    Inserci√≥n de comandos SQL maliciosos.
    Mitigaci√≥n: sanitizar entradas y usar ORM o consultas preparadas.
Insecure Design
    Fallas de seguridad desde la fase de dise√±o.
    Mitigaci√≥n: aplicar principios de dise√±o seguro.
Security Misconfiguration
    Configuraciones inseguras por defecto o mal hechas.
    Ej: contrase√±as por defecto, debug activo.
    Mitigaci√≥n: actualizar, auditar y endurecer la configuraci√≥n.
Componentes vulnerables y desactualizados
    Uso de bibliotecas o frameworks inseguros.
    Mitigaci√≥n: mantener inventario y actualizar dependencias.
Fallos en identificaci√≥n y autenticaci√≥n
    Ej: contrase√±as d√©biles, mala gesti√≥n de sesiones.
    Mitigaci√≥n: usar contrase√±as fuertes, HTTPS y autenticaci√≥n de dos factores.
Fallos en integridad de software y datos
    C√≥digo o datos modificados maliciosamente.
    Ej: inyecciones, corrupci√≥n de archivos.
    Mitigaci√≥n: firmar actualizaciones, verificar integridad.
Fallas en monitoreo y registro
    No detectar ataques ni registrar eventos clave.
    Mitigaci√≥n: activar logs, alertas y auditor√≠as.
Cross-Site Request Forgery (CSRF)
    El atacante env√≠a peticiones en nombre del usuario autenticado.
    Mitigaci√≥n: usar tokens CSRF √∫nicos por sesi√≥n.


Otras amenazas comunes
XSS (Cross-Site Scripting): inyecci√≥n de scripts maliciosos.
üîê Mitigaci√≥n: sanitizar entradas, evitar etiquetas <script>.

Clickjacking: enga√±ar al usuario para que haga clic en algo diferente a lo que cree.
üîê Mitigaci√≥n: usar cabeceras HTTP (X-Frame-Options).

Denegaci√≥n de servicio (DoS): saturar el servidor con tr√°fico falso.
üîê Mitigaci√≥n: firewalls, l√≠mites de tasa, detecci√≥n de tr√°fico malicioso.

Path Traversal: acceso no autorizado a archivos del sistema (../).
üîê Mitigaci√≥n: sanitizar rutas.

Inclusi√≥n de archivos / Inyecci√≥n de comandos
üîê Mitigaci√≥n: evitar eval/exec, desinfectar inputs.

Buenas pr√°cticas de seguridad
Sanitizar toda entrada del usuario.
Usar HTTPS + HSTS.
Implementar autenticaci√≥n robusta (contrase√±as fuertes + 2FA).
Limitar la exposici√≥n de datos sensibles (ej. solo mostrar los √∫ltimos 4 d√≠gitos de tarjetas).
Seguir el OWASP Top 10.
Auditar y escanear regularmente (con herramientas autom√°ticas o bug bounty).
Usar frameworks modernos que incorporen medidas de seguridad por defecto.

AUTENTICACI√ìN Y AUTORIZACI√ìN 
AUTENTICACI√ìN
- Verifica la identidad del usuario (¬øqui√©n sos?).
- M√©todos comunes:
  - Usuario + contrase√±a
  - OTP (One Time Password) ‚Üí SMS, email, Google Authenticator (MFA)
  - Passwordless ‚Üí magic link
  - Login con redes sociales (Google, Facebook)
  - Biom√©trica ‚Üí huellas, rostro
  - API: autenticaci√≥n b√°sica, OAuth, etc.

AUTORIZACI√ìN
- Define qu√© recursos puede usar un usuario autenticado.
- Ej: un admin accede a todo, un usuario com√∫n solo a su perfil.

M√âTODOS DE AUTORIZACI√ìN
- Autorizaci√≥n HTTP: usa encabezado Authorization en peticiones.
- Autorizaci√≥n API: clave + token oculto (por ejemplo en REST APIs).
- OAuth 2.0: delega permisos a apps de terceros con consentimiento.
- JWT (JSON Web Token):
  - Se genera tras login y se env√≠a con cada petici√≥n.
  - Contiene info del usuario firmada digitalmente.
  - Verifica identidad sin guardar sesi√≥n en servidor.

JWT EN NODE.JS
- Librer√≠a: jsonwebtoken
- Crear token:
    const token = jwt.sign({username: 'admin'}, 'clave', {expiresIn: '1h'});
- Verificar token:
    jwt.verify(token, 'clave', (err, decoded) => {...});

EJERCICIOS
- Login con token y acceso a ruta protegida usando Postman.
- Reemplazar usuarios hardcodeados por consulta a base de datos.

